package ru.vtb.uasp.validate;

global org.slf4j.Logger logger

import scala.Some
import ru.vtb.uasp.common.dto.UaspDto
import ru.vtb.uasp.validate.entity.ValidateMsg
import ru.vtb.uasp.mutator.configuration.drools.DrlHelper
import java.util.Arrays
import ru.vtb.uasp.mutator.service.dto.*

dialect "mvel"

rule "5.3"
  when
    UaspDto($localId:dataString.get("local_id"), DrlHelper.isNonEmpty($localId))
    UaspDto($auditRefAuthcode:dataString.get("audit_auth_code"), DrlHelper.isNonEmpty($auditRefAuthcode))
    UaspDto($auditRefRrn:dataString.get("audit_rrn"), DrlHelper.isNonEmpty($auditRefRrn))
    UaspDto($auditRefSrn:dataString.get("audit_srn"), DrlHelper.isNonEmpty($auditRefSrn))
    UaspDto($transactionAmount:dataDecimal.get("transaction_amount"), DrlHelper.isNonEmpty($transactionAmount))
    UaspDto($transactionDatetime:dataLong.get("transaction_datetime"), DrlHelper.isNonEmpty($transactionDatetime))

    UaspDto($actionType:dataString.get("action_type"), $actionType.nonEmpty && $actionType.get == "Presentment")
    UaspDto($processingResolution:dataString.get("processing_resolution"), $processingResolution.nonEmpty && $processingResolution.get == "Accepted")
    UaspDto($requestedAmountPaymentDirection:dataString.get("payment_direction"), $requestedAmountPaymentDirection.nonEmpty && $requestedAmountPaymentDirection.get == "Credit")

    UaspDto($PointOfServiceTerminalType:dataString.get("terminal_type"), $PointOfServiceTerminalType.nonEmpty && !Arrays.asList("WEB", "ECOMMERCE" ).contains($PointOfServiceTerminalType.get))
  then
    insert(new UaspOperation(drools.getRule().getName(), new StringMap("way4-case-5-3"), "system-uasp-way-classification", new ConcatenateStr(",")))
end