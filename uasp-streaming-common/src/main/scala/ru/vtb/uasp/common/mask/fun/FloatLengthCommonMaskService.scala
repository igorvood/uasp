package ru.vtb.uasp.common.mask.fun

import play.api.libs.json.JsString

/**
 * Число символов	Правило маскировки	Пример
 *  исходное значение	маскированное значение
 *  1	маскируем	1	*
 *  2	маскируем правый	12	1*
 *  3	маскируем два правых символа	123	1**
 *  4	маскируем три правых символа	1234	1***
 *  5 — 9	округлять 60% символов, начиная со второго. Округлять число символов для маскировки в большую сторону.
 *
 *  5 символов: 0.6*5 = 3 символа маскируем	12345	1***5
 *  6 символов: 0.6*6 = 3.6 → 4 символа маскируем	123456	1****6
 *  7 символов: 0.6*7 = 4.2 → 5 символов маскируем	1234567	1*****7
 *  8 символов: 0.6*8 = 4.8 → 5 символов маскируем	12345678	1*****78
 *  9 символов: 0.6*9 = 5.4 → 6 символов маскируем	123456789	1******89
 *  10 — 15	округлять 60% символов, начиная с третьего. Округлять число символов для маскировки в большую сторону.
 *  10 символов: 0.6*10 = 6 символов маскируем	1234567890	12******90
 *  11 символов: 0.6*11 = 6.6 → 7 символов маскируем	12345678909	12*******09
 *  12 символов: 0.6*12 = 7.2 → 8 символов маскируем	123456789098	12********98
 *  13 символов: 0.6*13 = 7.8 → 8 символов маскируем	1234567890987	12********987
 *  14 символов: 0.6*14 = 8.4 → 9 символов маскируем	12345678909876	12*********876
 *  15 символов: 0.6*15 = 9 символов маскируем	123456789098765	12*********8765
 *  16 и более	округлять 60% символов. Начинать с середины строки:
 *  a) если строка четная, то правая и левая стороны одинаковы.
 *  б) если строка нечетная, то левая часть меньше.
 *  Округлять число символов для маскировки в большую сторону. Соответственно, если число нечетно, то меньшее число маскированных символов справа, большее — слева.
 *  16 символов: 0.6*16 = 9.6 → 10	1234567890987654	123**********654
 *  17 символов: 0.6*17 = 10.2 → 11	12345678909876543	123***********543
 *  18 символов: 0.6*18 = 10.8 → 11	123456789876543234	123***********3234
 *  19 символов: 0.6*19 = 11.4 → 12	1234567898765432123	123************2123
 * */
case class FloatLengthCommonMaskService() extends JsStringMaskedFun {

  private def roundUp(d: Double) = math.ceil(d).toInt

  override def mask(in: String): JsString = {
    val str = in match {
      case s if s ==null || s.isEmpty => s
      case s if s.length == 1 => "*"
      case s if s.length >= 2 & s.length <= 4 =>
        s(0) + (1 until s.length).map{_=>"*"}.mkString
      case s if s.length >= 5 & s.length <= 9 =>
        val d = roundUp(s.length * 0.6)
        s(0) + (1 to d).map{ _=>"*"}.mkString + s.substring(d+1)
      case s if s.length >= 10 & s.length <= 15 =>
        val d = roundUp(s.length * 0.6)
        s.substring(0,2)  + (1 to d).map{_=>"*"}.mkString + s.substring(d + 2)
      case s if s.length >= 16 =>
        val d = roundUp(s.length * 0.6)
        val beginCnt = (s.length - d) / 2
        val beginStr = s.substring(0, beginCnt)
        beginStr + (1 to d).map{_=>"*"}.mkString + s.substring(d + beginStr.length)
    }

    JsString(str)
  }

}
